// === –ö–æ–Ω—Ñ–∏–≥ ===
const API_BASE = 'https://kids-games-backend.onrender.com'; // HTTPS –¥–ª—è GitHub Pages

// === DOM ===
const playfield   = document.getElementById('playfield');
const bug         = document.getElementById('bug');
const timeEl      = document.querySelector('[data-time]');
const scoreEl     = document.querySelector('[data-score]');
const soundToggle = document.getElementById('soundToggle');

const postGame    = document.getElementById('postGame');
const finalScore  = document.getElementById('finalScore');
const form        = document.getElementById('scoreForm');
const nameInput   = document.getElementById('playerName');
const submitBtn   = document.getElementById('submitBtn');
const statusEl    = document.getElementById('scoreStatus');
const leaderboard = document.getElementById('leaderboard');
const restartBtn  = document.getElementById('restartBtn');

// === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã ===
const ROUND_MS = 20000;       // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞ ‚Äî 20—Å
const HOP_MIN  = 500;         // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä—ã–∂–∫–∞
const HOP_MAX  = 800;
const BUG_SIZE = 56;          // –¥–∏–∞–º–µ—Ç—Ä –∂—É–∫–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∏–ª–µ–º)

// === SFX ===
const SFX = {
  enabled: false,
  primed:  false,   // –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –ª–∏ –º–µ–¥–∏–∞ –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  click:   new Audio('../../assets/sfx/click.mp3'),
  bg:      new Audio('../../assets/sfx/bg-20s.mp3'),
  last5:   new Audio('../../assets/sfx/last5.mp3'),
};

// –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏/–ø–æ–≤–µ–¥–µ–Ω–∏—è
SFX.bg.loop       = true;
SFX.bg.volume     = 0.25;
SFX.click.volume  = 0.6;
SFX.last5.volume  = 0.7;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è ¬´–∏–≥—Ä–∞–ª–∫–∞¬ª
function playOnce(a) {
  try { a.currentTime = 0; a.play().catch(()=>{}); } catch {}
}
// –ö–ª–∏–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Üí –¥–µ–ª–∞–µ–º –∫–ª–æ–Ω, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
function playClick() {
  if (!SFX.enabled) return;
  try {
    const node = SFX.click.cloneNode();
    node.volume = SFX.click.volume;
    node.play().catch(()=>{});
  } catch {}
}
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
function primeAudio() {
  if (SFX.primed) return;
  // –º–∞–ª–µ–Ω—å–∫–∏–π —Ö–∞–∫: ¬´—Å—Ç–∞—Ä—Ç-—Å—Ç–æ–ø¬ª —Å–¥–µ–ª–∞–µ—Ç –∞—É–¥–∏–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö .play()
  [SFX.click, SFX.bg, SFX.last5].forEach(a => {
    try { a.play().then(()=>a.pause()).catch(()=>{}); } catch {}
  });
  SFX.primed = true;
}

// –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞
function refreshSoundUI(){
  if (SFX.enabled) {
    soundToggle.textContent = 'üîà Sound: ON';
    soundToggle.setAttribute('aria-pressed', 'true');
  } else {
    soundToggle.textContent = 'üîá Sound: OFF';
    soundToggle.setAttribute('aria-pressed', 'false');
  }
}
soundToggle.addEventListener('click', () => {
  primeAudio();
  SFX.enabled = !SFX.enabled;
  refreshSoundUI();

  // –≤–∫–ª—é—á–∏–ª–∏ –∑–≤—É–∫ ‚Äî –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥—ë—Ç, –∑–∞–ø—É—Å—Ç–∏–º —Ñ–æ–Ω
  if (SFX.enabled && state.running) {
    try { SFX.bg.currentTime = 0; SFX.bg.play().catch(()=>{}); } catch {}
  } else {
    // –≤—ã–∫–ª—é—á–∏–ª–∏ ‚Äî –≤—Å—ë —Å—Ç–æ–ø–∞–µ–º
    try { SFX.bg.pause(); } catch {}
    try { SFX.last5.pause(); } catch {}
  }
});
refreshSoundUI();

// === –°–æ—Å—Ç–æ—è–Ω–∏–µ ===
const state = { running:false, start:0, tickId:0, hopId:0, score:0, last5Played:false };

// –£—Ç–∏–ª–∏—Ç—ã
const clamp = (v,min,max) => Math.max(min, Math.min(max, v));
const rnd   = (a,b) => Math.floor(a + Math.random()*(b-a+1));

// –¢–∞–π–º–µ—Ä/–æ—á–∫–∏ (–æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç + ¬´–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞¬ª)
function updateTimer(ms){
  const left = Math.max(0, ROUND_MS - ms);
  timeEl.textContent = 'Time: ' + (left/1000).toFixed(1) + 's';

  // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ ‚Äî –∫—Ä–∞—Å–Ω—ã–π + –ø—É–ª—å—Å + –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
  if (left <= 5000) {
    timeEl.classList.add('danger');
    if (SFX.enabled && !state.last5Played) {
      playOnce(SFX.last5);
      state.last5Played = true;
    }
  } else {
    timeEl.classList.remove('danger');
    state.last5Played = false;
  }
}
function updateScore(){ scoreEl.textContent = 'Score: ' + state.score; }

// –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∂—É–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è
function placeBugRandom(){
  const rect = playfield.getBoundingClientRect();
  const maxX = rect.width  - BUG_SIZE - 4; // –º–∏–Ω—É—Å —Ä–∞–º–∫–∞
  const maxY = rect.height - BUG_SIZE - 4;
  const x = rnd(0, clamp(maxX, 0, 99999));
  const y = rnd(0, clamp(maxY, 0, 99999));
  bug.style.left = x + 'px';
  bug.style.top  = y + 'px';
}

// –ñ—É–∫ —Å–∞–º –ø—Ä—ã–≥–∞–µ—Ç –∫–∞–∂–¥—ã–µ 500‚Äì800 –º—Å
function hopLoop(){
  const dt = rnd(HOP_MIN, HOP_MAX);
  state.hopId = setTimeout(()=>{
    if (!state.running) return;
    placeBugRandom();
    hopLoop();
  }, dt);
}

function tick(){
  const ms = Date.now() - state.start;
  updateTimer(ms);
  if (ms >= ROUND_MS) { endGame(); return; }
  state.tickId = requestAnimationFrame(tick);
}

function startGame(){
  postGame.hidden = true;
  statusEl.textContent = '';
  leaderboard.innerHTML = '';

  state.running = true;
  state.score = 0;
  state.last5Played = false;
  updateScore();
  updateTimer(0);

  placeBugRandom();
  hopLoop();
  tick();

  nameInput.value = localStorage.getItem('kg_name') || '';

  // —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
  if (SFX.enabled) {
    primeAudio();
    try { SFX.bg.currentTime = 0; SFX.bg.play().catch(()=>{}); } catch {}
  }
}

function endGame(){
  state.running = false;
  cancelAnimationFrame(state.tickId);
  clearTimeout(state.hopId);

  finalScore.textContent = state.score;
  postGame.hidden = false;
  nameInput.focus();

  // —Å—Ç–æ–ø–∞–µ–º —Ñ–æ–Ω
  try { SFX.bg.pause(); } catch {}

  refreshLeaderboard().catch(()=>{});
}

// –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–ø ¬´–±—É–¥–∏—Ç¬ª –∞—É–¥–∏–æ-–¥–≤–∏–∂–æ–∫
playfield.addEventListener('pointerdown', primeAudio);

// –ö–ª–∏–∫ –ø–æ –∂—É–∫—É ‚Äî +1 –æ—á–∫–æ, –ø—Ä—ã–∂–æ–∫ –∏ —â–µ–ª—á–æ–∫
bug.addEventListener('click', () => {
  if (!state.running) return;
  state.score += 1;
  updateScore();
  placeBugRandom();
  playClick();
});

// –†–µ—Å—Ç–∞—Ä—Ç
restartBtn.addEventListener('click', startGame);

// === –†–∞–±–æ—Ç–∞ —Å –±—ç–∫–µ–Ω–¥–æ–º ===
async function refreshLeaderboard(){
  try{
    const r = await fetch(API_BASE + '/scores', { cache:'no-store' });
    if (!r.ok) throw new Error('HTTP ' + r.status);
    const data = await r.json();

    const top = data.sort((a,b)=>b.score - a.score).slice(0,10);
    leaderboard.innerHTML = '';           // –æ—á–∏—Å—Ç–∫–∞
    top.forEach((row, i) => {
      const li = document.createElement('li');
      li.textContent = `${i+1}. ${row.name} ‚Äî ${row.score}`;
      leaderboard.appendChild(li);
    });
  }catch(e){
    leaderboard.innerHTML = '<li>Scores unavailable (server sleeping or offline).</li>';
  }
}

form.addEventListener('submit', async (ev)=>{
  ev.preventDefault();
  const name = (nameInput.value || '').trim().slice(0,12);
  if (!name) { statusEl.textContent = 'Enter your name.'; return; }

  localStorage.setItem('kg_name', name);

  submitBtn.disabled = true;
  statusEl.textContent = 'Submitting‚Ä¶';

  try{
    const r = await fetch(API_BASE + '/scores', {
      method:'POST',
      headers:{ 'Content-Type':'application/json' },
      body: JSON.stringify({ name, score: state.score })
    });
    if (!r.ok) throw new Error('HTTP ' + r.status);
    const js = await r.json();
    if (js && js.ok){
      statusEl.textContent = 'Leaderboard updated.';
      await refreshLeaderboard();
    } else {
      statusEl.textContent = 'Server declined the score.';
    }
  }catch(e){
    statusEl.textContent = 'Can‚Äôt submit (server sleeping?). Try again in 10‚Äì20s.';
  }finally{
    submitBtn.disabled = false;
  }
});

// –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç
(async function init(){
  await refreshLeaderboard();   // ¬´—Ä–∞–∑–±—É–¥–∏—Ç¬ª Render, –µ—Å–ª–∏ —Å–ø–∏—Ç
  startGame();
})();
